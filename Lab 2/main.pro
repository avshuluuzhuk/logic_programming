implement main
    open core, file, stdio

domains
    category = одежда; обувь; аксессуары; верхняя_одежда.
    status = standart; silver; gold.

class facts - goods
    товар : (integer Id, string Товар, category Категория, real Цена) nondeterm.
    покупатель : (string Покупатель, integer Номер_телефона, status Статус) nondeterm.
    покупка : (integer Номер_телефона, integer Id, real Количество, string Дата) nondeterm.

class facts
    s : (real Sum) single.

clauses
    s(0).

class predicates
    купили_товар : (string Товар, string Покупатель) nondeterm anyflow.
    товар : (string Товар, real Цена, category Категория) nondeterm anyflow.
    статус_покупателя : (string Покупатель, status Статус) nondeterm anyflow.
    сумма : (string Покупатель) nondeterm anyflow.
    сумма_покупки_товара : (string Покупатель) nondeterm anyflow.
    товары_проданные_в_день : (string Дата, string Товар) nondeterm anyflow.
    скидка_покупателю : (string Покупатель, string Скидка) nondeterm anyflow.

clauses
%вычисление скидки по статусу покупателя
    скидка_покупателю(Покупатель, Скидка) :-
        покупатель(Покупатель, _, Статус),
        (Статус = gold and Скидка = "20%" or Статус = silver and Скидка = "10%" or Статус = standart and Скидка = "5%").

%по имени покупателя выводятся купленные товары
    купили_товар(Товар, Покупатель) :-
        товар(Id, Товар, _, _),
        покупатель(Покупатель, Телефон, _),
        покупка(Телефон, Id, _, _).

%по категории товара выводится название товара
    товар(Товар, Цена, Категория) :-
        товар(_, Товар, Категория, Цена).

%по имени покупателя выводится его статус
    статус_покупателя(Покупатель, Статус) :-
        покупатель(Покупатель, _, Статус).

%сумма потраченная на определенный товар и его количество по имени покупателя
    сумма_покупки_товара(Покупатель) :-
        товар(Id, Товар, _, Цена),
        покупатель(Покупатель, Телефон, _),
        покупка(Телефон, Id, Количество, _),
        write(Товар, " в количестве ", Количество, " шт. : ", Количество * Цена),
        nl.

%вывод общей суммы всех позиций, купленнные покупателем
    сумма(Покупатель) :-
        assert(s(0)),
        товар(Id, Товар, _, Цена),
        покупатель(Покупатель, Телефон, _),
        покупка(Телефон, Id, Количество, _),
        s(Sum),
        assert(s(Sum + Количество * Цена)),
        fail.

    сумма(Покупатель) :-
        s(Sum),
        write("\n", Покупатель, ": общая сумма покупок = ", Sum),
        nl.

%вывод товаров проданные в определенный день
    товары_проданные_в_день(Дата, Товар) :-
        товар(Id, Товар, _, _),
        покупка(_, Id, _, Дата).

clauses
    run() :-
        consult("../family.txt", goods),
        fail.

    run() :-
        write("\nИмена покупателей, купившие футболки: \n"),
        купили_товар("футболка", Покупатель),
        write(Покупатель),
        nl,
        fail.

    run() :-
        write("\nГермиона Грейнджер: скидка - "),
        скидка_покупателю("Гермиона Грейнджер", Скидка),
        write(Скидка),
        nl,
        fail.

    run() :-
        write("\nТовары проданные Гарри Поттеру: \n"),
        купили_товар(Товар, "Гарри Поттер"),
        write(Товар),
        nl,
        fail.

    run() :-
        write("\nТовары из категории обувь и цена за одну позицию: \n"),
        товар(Товар, Цена, обувь),
        write(Товар, " - ", Цена),
        nl,
        fail.

    run() :-
        write("\nИмена покупателей со статусом Gold: \n"),
        статус_покупателя(Покупатель, gold),
        write(Покупатель),
        nl,
        fail.

    run() :-
        write("\nПокупатель Гарри Поттер купил товар: \n"),
        сумма_покупки_товара("Гарри Поттер"),
        fail.

    run() :-
        сумма("Гарри Поттер"),
        fail.

    run() :-
        write("\n01.09.2023 продано: \n"),
        товары_проданные_в_день("01.09.2023", Товар),
        write(Товар),
        nl,
        fail.

    run().

end implement main

goal
    console::runUtf8(main::run).
